

import pandas as pd
from src.config import Config
from src.logger import logger

class Strategy:
    """
    Contains the core trading logic. 
    It generates entry and exit signals based on the provided data.
    """
    def __init__(self, settings_obj: Config):
        """
        Initializes the Strategy with parameters loaded from settings.
        """
        self.settings = settings_obj
        # Load strategy-specific parameters from the central config
        self.sma_length = self.settings.sma_length
        self.volume_sma_length = self.settings.volume_sma_length
        self.volume_multiplier = self.settings.volume_multiplier
        self.adx_length = self.settings.adx_length
        self.adx_threshold = self.settings.adx_threshold
        self.atr_length = self.settings.atr_length
        self.rsi_length = self.settings.rsi_length
        self.take_profit_levels = self.settings.take_profit_levels

    def get_trade_parameters(self, df: pd.DataFrame) -> dict:
        """
        Checks for long and short entry signals on the latest candle
        and returns trade parameters if a signal is found.

        Args:
            df (pd.DataFrame): DataFrame with OHLCV data and all indicators.

        Returns:
            dict: A dictionary containing 'signal_type' ('long', 'short', or None),
                  'entry_price', 'take_profit_levels' (list of floats),
                  'stop_loss', and 'adx_at_entry'.
        """
        if df.empty:
            return {'signal_type': None}

        last_candle = df.iloc[-1]
        
        # Column names are dynamically generated by pandas-ta
        sma_col = f"SMA_{self.sma_length}"
        adx_col = f"ADX_{self.adx_length}"
        rsi_col = f"RSI_{self.rsi_length}"
        vol_sma_col = f"VOL_SMA_{self.volume_sma_length}"
        atr_col = f"ATRr_{self.atr_length}"

        # Ensure all required columns exist
        required_cols = ['open', 'high', 'low', 'close', 'volume', 'HA_open', 'HA_close', 
                         sma_col, adx_col, rsi_col, atr_col, vol_sma_col]
        if not all(col in last_candle.index for col in required_cols):
            logger.warning("[Strategy] Missing required indicator columns in the DataFrame.")
            return {'signal_type': None}

        # Calculate volume threshold for the last candle
        volume_threshold = last_candle[vol_sma_col] * self.settings.volume_multiplier

        # Long entry conditions
        long_condition = (
            last_candle['volume'] > volume_threshold and
            last_candle['HA_close'] > last_candle['HA_open'] and
            last_candle['close'] > last_candle[sma_col] and
            last_candle[adx_col] > self.adx_threshold and
            last_candle[rsi_col] > 50
        )

        # Short entry conditions
        short_condition = (
            last_candle['volume'] > volume_threshold and
            last_candle['HA_close'] < last_candle['HA_open'] and
            last_candle['close'] < last_candle[sma_col] and
            last_candle[adx_col] > self.adx_threshold and
            last_candle[rsi_col] < 50
        )

        trade_parameters = {'signal_type': None}

        if long_condition:
            adx_at_entry = last_candle[adx_col]
            tp_multiplier = 3.5 if adx_at_entry > 35 else 3.0 if adx_at_entry > 25 else 2.5
            
            trade_parameters = {
                'signal_type': 'long',
                'entry_price': last_candle['close'],
                'take_profit_levels': [last_candle['close'] + level * last_candle[atr_col] for level in self.settings.take_profit_levels],
                'stop_loss': last_candle['low'] - 2 * last_candle[atr_col], # Initial stop based on low
                'adx_at_entry': adx_at_entry
            }
            logger.info(f"[Strategy] Long signal detected. Entry: {trade_parameters['entry_price']:.2f}, TPs: {trade_parameters['take_profit_levels']}, SL: {trade_parameters['stop_loss']:.2f}")

        elif short_condition:
            adx_at_entry = last_candle[adx_col]
            tp_multiplier = 3.5 if adx_at_entry > 35 else 3.0 if adx_at_entry > 25 else 2.5

            trade_parameters = {
                'signal_type': 'short',
                'entry_price': last_candle['close'],
                'take_profit_levels': [last_candle['close'] - level * last_candle[atr_col] for level in self.settings.take_profit_levels],
                'stop_loss': last_candle['high'] + 2 * last_candle[atr_col], # Initial stop based on high
                'adx_at_entry': adx_at_entry
            }
            logger.info(f"[Strategy] Short signal detected. Entry: {trade_parameters['entry_price']:.2f}, TPs: {trade_parameters['take_profit_levels']}, SL: {trade_parameters['stop_loss']:.2f}")

        else:
            logger.info("[Strategy] No signal detected on the last candle.")

        return trade_parameters

if __name__ == '__main__':
    # Example of how to use the Strategy
    import sys
    import os

    # Add the project root to the Python path
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.insert(0, project_root)

    from src.data_handler import DataHandler
    from src.indicator_calculator import IndicatorCalculator

    # 1. Get data and calculate indicators
    data_handler = DataHandler(symbol=self.settings.symbol, timeframe=self.settings.timeframe, exchange_id=self.settings.exchange_id)
    market_data = data_handler.get_data()

    if market_data is not None:
        calculator = IndicatorCalculator()
        data_with_indicators = calculator.add_all_indicators(market_data)

        # 2. Check for trade parameters
        strategy = Strategy(settings_obj=settings)
        trade_info = strategy.get_trade_parameters(data_with_indicators)

        logger.info("--- Trade Parameters ---")
        if trade_info['signal_type']:
            logger.info(f"Signal Type: {trade_info['signal_type']}")
            logger.info(f"Entry Price: {trade_info['entry_price']:.2f}")
            logger.info(f"Take Profit Levels: {trade_info['take_profit_levels']}")
            logger.info(f"Stop Loss: {trade_info['stop_loss']:.2f}")
            logger.info(f"ADX at Entry: {trade_info['adx_at_entry']:.2f}")
        else:
            logger.info("No trade signal.")
